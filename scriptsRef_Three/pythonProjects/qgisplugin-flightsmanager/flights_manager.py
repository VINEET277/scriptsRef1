# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FlightsManager
                                 A QGIS plugin
 Manage Flights
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-27
        git sha              : $Format:%H$
        copyright            : (C) 2021 by rukmangadanies@gmail.com
        email                : rukmangadanies@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QDate, QPersistentModelIndex, QTime
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QHeaderView, QTableWidgetItem, QPushButton

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .flights_manager_dialog import FlightsManagerDialog
import os.path

import requests
from base64 import b64encode
from datetime import datetime

from qgis.core import QgsVectorLayer, QgsDataSourceUri, QgsProject, QgsFeature, QgsPointXY, QgsGeometry, QgsProcessingFeatureSourceDefinition

import processing
from processing.core.Processing import Processing
Processing.initialize()

import json

class FlightsManager:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'FlightsManager_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&FlightsManager')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('FlightsManager', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/flights_manager/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Add Flight'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&FlightsManager'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = FlightsManagerDialog()
            
            self.loggedIn = False
            self.initialSetups()
            self.addData()
            self.layerLoadData()
            self.loadAttributeData()

        self.dlg.show()
        self.dlg.setFixedSize(self.dlg.sizeHint())
        self.minimalSizeState = self.dlg.sizeHint()
        self.kmlLayer = None
        self.shapefilesLyr = []

    def initialSetups(self):
        self.fullSizeState = self.dlg.sizeHint()
        # self.dlg.tabsWidget.hide()
        self.dlg.attributesWidget.hide()

        if self.loggedIn == False:
            self.dlg.loginStatusLabel.setText('Login To Continue...')
            self.dlg.jobStatusLabel.setText('')

        self.username = 'username'
        self.password = 'password'
        self.dlg.loginRLogoutBtn.clicked.connect(self.loginRLogout)

        header = self.dlg.tableWidget.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.Stretch)
        header.setSectionResizeMode(2, QHeaderView.Stretch)
        header.setSectionResizeMode(3, QHeaderView.Stretch)
        
        self.dlg.loadStateBoundary.clicked.connect(self.loadStateBoundary)
        self.dlg.loadVillages.clicked.connect(self.loadVillages)
        self.dlg.loadFlights.clicked.connect(self.loadFlights)
        
        self.dlg.toggleAttributes.clicked.connect(self.toggleAttributes)
        self.dlg.selectKML.clicked.connect(self.loadKML)
        self.dlg.addShapefiles.clicked.connect(self.addShapefile)
        self.dlg.uploadFlightBtn.clicked.connect(self.uploadFlight)        

        QgsProject.instance().removeAllMapLayers()
        canvas = self.iface.mapCanvas()
        canvas.refresh()

    def addData(self):
        self.dlg.districtsList = ['Bagalkot', 'Ballari', 'Belagavi', 'Bengaluru (Rural)', 'Bengaluru (Urban)', 'Bidar', 'Chamarajanagara', 'Chikkaballapura', 'Chikkamagaluru', 'Chitradurga', 'Dakshina Kannada', 'Davanagere', 'Dharwad', 'Gadag', 'Hassan', 'Haveri', 'Kalburgi', 'Kodagu', 'Kolara', 'Koppal', 'Mandya', 'Mysuru', 'Raichur', 'Ramanagara', 'Shivamogga', 'Tumakuru', 'Udupi', 'Uttara Kannada', 'Vijayapura', 'Yadgir']

    def testFunc(self):
        dialog = QFileDialog()
        foo_dir = dialog.getExistingDirectory(None, 'Select an awesome directory')
        print(foo_dir)

    def uploadFlight(self):
        print('Uploading Flight...')

        uri = QgsDataSourceUri()
        uri.setParam('typename', 'kgdc:flightlines')
        
        uri.setUsername('maggi')
        uri.setPassword('jack')
        uri.setParam('url', 'http://localhost:8080/geoserver/ows?service=wfs&version=2.0.0&request=GetCapabilities')

        wfstlyr = QgsVectorLayer(uri.uri(), 'temporarylayer', 'WFS')
        QgsProject.instance().addMapLayer(wfstlyr)
        wfstlyr.startEditing()

        self.iface.setActiveLayer( self.kmlLayer )

        featids = [feat.id() for feat in self.kmlLayer.getFeatures()]
        # print(featids)
        self.kmlLayer.select(featids[0])

        self.iface.actionCopyFeatures().trigger()
        self.iface.setActiveLayer(wfstlyr)
        self.iface.actionPasteFeatures().trigger()
        wfstlyr.commitChanges()

        self.iface.vectorLayerTools().stopEditing(wfstlyr)
        QgsProject.instance().removeMapLayer(wfstlyr.id())

        

    # Attribute Functions   -----------------------------------------------------------------------------------------------

    def loadAttributeData(self):
        self.dlg.district.addItems(self.dlg.districtsList)
        self.dlg.dayFlightCount.addItems(['FLY_1', 'FLY_2', 'FLY_3', 'FLY_4', 'FLY_5', 'FLY_6', 'FLY_7', 'FLY_8'])
        self.dlg.projectCombo.addItems(['SVAMITVA', 'LSMK_SVAMITVA', 'LSMK', 'Unsuccessful_Poor_Weather', 'Unsuccessful_Technical_Issue', 'Unsuccessful_High_WindSpeed', 'Unsuccessful_Geotagging'])
        
        todaysdate = datetime.now()
        self.dlg.flightDate.setDate(QDate(int(todaysdate.strftime("%Y")), int(todaysdate.strftime("%m")), int(todaysdate.strftime("%d"))))
        self.dlg.trainingFlight.addItems(['No', 'Yes'])
        self.dlg.freshRefly.addItems(['FRESH', 'REFLY'])

        self.attributeConnections()

    def attributeConnections(self):
        self.dlg.droneNumber.currentTextChanged.connect(self.buildFlightID)
        self.dlg.flightNumber.textChanged.connect(self.buildFlightID)
        
        self.dlg.timeTakeOff.timeChanged.connect(self.flightDuration)
        self.dlg.timeLanding.timeChanged.connect(self.flightDuration)
    
    def buildFlightID(self):
        self.dlg.flightID.setText(self.dlg.droneNumber.currentText() + '_' + self.dlg.flightNumber.text())

    def flightDuration(self):
        startHourMins = self.dlg.timeTakeOff.time().hour() * 60
        startMinuteMins = self.dlg.timeTakeOff.time().minute()
        endHourMins = self.dlg.timeLanding.time().hour() * 60
        endMinuteMins = self.dlg.timeLanding.time().minute()
        
        totalMinutesDuration = endHourMins - startHourMins + endMinuteMins - startMinuteMins
        hours = totalMinutesDuration // 60
        minutes = totalMinutesDuration % 60
        print(hours, minutes)

        self.dlg.timeDuration.setTime(QTime(hours, minutes))

    # Login Functions   --------------------------------------------------------------------------------------------

    def loginRLogout(self):
        if self.dlg.username.text() == '' or self.dlg.password.text() == '':
            self.dlg.loginStatusLabel.setText('Username / Password cannot be Blank...')
            return 0
        if self.loggedIn == False:
            try:
                user = self.dlg.username.text()
                passwd = self.dlg.password.text()

                headers = {'Authorization': 'Basic %s' % b64encode(str.encode("{}:{}".format(user, passwd))).decode("ascii")}

                x = requests.post('http://localhost:8080/geoserver/ows?service=wfs&version=2.0.0&request=GetCapabilities', headers=headers)
                # print(x.text)
                # print(x.reason)
                # print(x.status_code)

                if x.status_code == 200:
                    # print('loginRLogout_2_1')
                    self.handleLoggedInState()
                else:
                    self.dlg.loginStatusLabel.setText('Unauthorized... Try Again...')
            except Exception as e:
                print(str(e))
                self.dlg.loginStatusLabel.setText('Server / Internet Connection Error...')
        else:
            self.handleLoggedOutState()
            

    def handleLoggedInState(self):
        self.username = self.dlg.username.text()
        self.password = self.dlg.password.text()
        self.loggedIn = True
        self.dlg.loginRLogoutBtn.setText('Logout')
        self.dlg.loginStatusLabel.setText('Logged In...')
        self.dlg.tabsWidget.show()
        
        self.dlg.username.setEnabled(False)
        self.dlg.password.setEnabled(False)
        self.dlg.setFixedSize(self.dlg.sizeHint())
        self.midSizedState = self.dlg.size()

        self.loadAfterLoginData()

    def loadAfterLoginData(self):
        try:
            # print('loadAfterLoginData')
            user = self.username
            passwd = self.password
            headers = {'Authorization': 'Basic %s' % b64encode(str.encode("{}:{}".format(user, passwd))).decode("ascii")}
            droneNumbersURL = 'http://localhost:8080/geoserver/kgdc/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=kgdc:tabledronenumbers&outputFormat=application/json'

            x = requests.post(droneNumbersURL, headers=headers)
            # print(x.text)
            # print(x.reason)
            # print(x.status_code)
            jsonstr = x.text
            
            y = json.loads(jsonstr)
            # print(y)
            dronenumbers = []
            for x in y['features']:
                dronenumbers.append((x['id'].replace('tabledronenumbers.', '')))
            
            # print(dronenumbers)

            self.dlg.droneNumber.addItems(dronenumbers)
        except Exception as e:
            print('Error in Loading Drone Numbers...')
    
    def handleLoggedOutState(self):
        self.loggedIn = False
        self.username = 'username'
        self.password = 'password'
        self.dlg.loginRLogoutBtn.setText('Login')
        self.dlg.loginStatusLabel.setText('Login to Continue')
        self.dlg.username.setText('')
        self.dlg.password.setText('')
        self.dlg.username.setEnabled(True)
        self.dlg.password.setEnabled(True)
        self.dlg.tabsWidget.hide()
        self.dlg.setFixedSize(self.minimalSizeState)

    # Layer Manager Functions   --------------------------------------------------------------------------------------------

    def layerLoadData(self):
        self.dlg.districtCombo.addItems(self.dlg.districtsList)

    def loadStateBoundary(self):
        if self.loggedIn:
            uri = QgsDataSourceUri()
            uri.setParam('typename', 'kgdc:karndistbounds')
            
            uri.setUsername(self.username)
            uri.setPassword(self.password)
            uri.setParam('url', 'http://localhost:8080/geoserver/ows?service=wfs&version=2.0.0&request=GetCapabilities')

            vlayer = QgsVectorLayer(uri.uri(), 'KarnatakaBoundary', 'WFS')
            if not vlayer.isValid():
                self.dlg.loginStatusLabel.setText('Limited User has No Access...')
            else:
                self.loadProxyLayer('polygon', vlayer, 'KarnatakaBoundary')
                self.dlg.loginStatusLabel.setText('Layer Loaded Successfully...')
        else:
            self.loginUser()
            if self.loggedIn:
                self.loadStateLayer()

    def loadVillages(self):
        if self.loggedIn:
            uri = QgsDataSourceUri()
            typename = 'kgdc:karnvillages'
            uri.setParam('typename', typename)
            
            uri.setUsername(self.username)
            uri.setPassword(self.password)            

            cql_filter = "cql_filter=kgisdist_1='{}'".format(self.dlg.districtCombo.currentText())
            print(cql_filter)

            uri.setParam('url', 'http://localhost:8080/geoserver/ows?service=wfs&version=2.0.0&request=GetFeature&{}'.format(cql_filter))

            vlayer = QgsVectorLayer(uri.uri(), self.dlg.districtCombo.currentText() + '_Villages', 'WFS')
            if not vlayer.isValid():
                self.dlg.loginStatusLabel.setText('Limited User has No Access...')
            else:
                self.loadProxyLayer('polygon', vlayer, self.dlg.districtCombo.currentText() + '_Villages')
                self.dlg.loginStatusLabel.setText('Layer Loaded Successfully...')

        else:
            self.loginUser()
            if self.loggedIn:
                self.loadStateLayer()

    def loadProxyLayer(self, feattype, vlayer, lyr_name):
        feats = [feat for feat in vlayer.getFeatures()]
        vLyrPath = '{}?crs=epsg:32643'.format(feattype)
        mem_layer = QgsVectorLayer(vLyrPath, lyr_name, 'memory')

        mem_layer_data = mem_layer.dataProvider()
        attr = vlayer.dataProvider().fields().toList()
        mem_layer_data.addAttributes(attr)
        mem_layer.updateFields()
        mem_layer_data.addFeatures(feats)

        QgsProject.instance().addMapLayer(mem_layer)
        canvas = self.iface.mapCanvas()
        extent = mem_layer.extent()
        canvas.setExtent(extent)
        canvas.refresh()

    def loadFlights(self):
        uri = QgsDataSourceUri()
        uri.setParam('typename', 'kgdc:flightlines')
        
        uri.setUsername('maggi')
        uri.setPassword('jack')
        uri.setParam('url', 'http://localhost:8080/geoserver/ows?service=wfs&version=1.1.0&request=GetCapabilities')

        wfstlyr = QgsVectorLayer(uri.uri(), 'Flightlines', 'WFS')
        QgsProject.instance().addMapLayer(wfstlyr)


    # Flightlines Uploader  -----------------------------------------------------------------------------------------
    def loadKML(self):
        # print('Loading KML...')
        filedialog = QFileDialog()
        kmlPath = filedialog.getOpenFileName(None, 'Select KML File')
        # print(kmlPath[0])

        filename, file_extension = os.path.splitext(kmlPath[0])
        filename = os.path.basename(filename)

        table = self.dlg.tableWidget
        if(table.rowCount() == 0):
            if file_extension == '.kml':
                uri = '{}|geometrytype={}'.format(kmlPath[0], 'LineString')
                kmllayer =  QgsVectorLayer(kmlPath[0], filename, 'ogr')
                if kmllayer.isValid():
                    QgsProject.instance().addMapLayer(kmllayer)
                    
                    self.kmlLayer = kmllayer
                    self.dlg.jobStatusLabel.setText('Valid KML...')

                    QgsProject.instance().addMapLayer(kmllayer)

                    canvas = self.iface.mapCanvas()
                    extent = kmllayer.extent()
                    canvas.setExtent(extent)
                    canvas.refresh()
                    
                    table.insertRow(table.rowCount())
                    table.setItem(0, 0, QTableWidgetItem('KML'))
                    table.setItem(0, 1, QTableWidgetItem(filename + file_extension))
                    table.setItem(0, 2, QTableWidgetItem('Valid'))

                    btn = QPushButton(table)
                    btn.setText('X')
                    table.setCellWidget(0, 3, btn)
                    btn.clicked.connect(self.discardKML)
                else:
                    self.dlg.jobStatusLabel.setText('Invalid / Corrupt KML...')    
            else:
                self.dlg.jobStatusLabel.setText('Select Valid KML...')
        else:
            self.dlg.jobStatusLabel.setText('Only One KML...')
    
    def discardKML(self):
        table = self.dlg.tableWidget
        table.setRowCount(0)
        QgsProject.instance().removeAllMapLayers()
        canvas = self.iface.mapCanvas()
        canvas.refresh()
        self.kmlLayer = None
        self.dlg.jobStatusLabel.setText('Select KML...')

    def addShapefile(self):
        print('Adding Shapefile...')
        filedialog = QFileDialog()
        shpPath = filedialog.getOpenFileName(None, 'Select Shape File')
        print(shpPath[0])

        filename, file_extension = os.path.splitext(shpPath[0])
        filename = os.path.basename(filename)

        table = self.dlg.tableWidget
        if(table.rowCount() > 0):
            if file_extension == '.shp':
                shplayer =  QgsVectorLayer(shpPath[0], filename, 'ogr')
                if shplayer.isValid():
                    self.dlg.jobStatusLabel.setText('Valid Shapefile...')
                    
                    rowCount = table.rowCount()
                    table.insertRow(rowCount)
                    table.setItem(rowCount, 0, QTableWidgetItem('Shapefile'))
                    table.setItem(rowCount, 1, QTableWidgetItem(filename + file_extension))
                    table.setItem(rowCount, 2, QTableWidgetItem('Valid'))

                    btn = QPushButton(table)
                    btn.setText('X')
                    table.setCellWidget(rowCount, 3, btn)

                    index = QPersistentModelIndex(table.model().index(rowCount, 3))
                    btn.clicked.connect(lambda: self.discardShape(index))
                    
                    self.shapefilesLyr.append(shplayer)
                    # self.shapefilesLyr.append([rowCount, shplayer])

                    QgsProject.instance().addMapLayer(shplayer)

                    canvas = self.iface.mapCanvas()
                    canvas.refresh()
                    
                else:
                    self.dlg.jobStatusLabel.setText('Invalid / Corrupt Shape...')    
            else:
                self.dlg.jobStatusLabel.setText('Select Valid Shapefile...')
        else:
            self.dlg.jobStatusLabel.setText('Add KML First...')


    def discardShape(self, index):
        print('to Discard Shape')
        if index.isValid():
            row = index.row()
            self.dlg.tableWidget.removeRow(row)
            del self.shapefilesLyr[row - 1]
            print(self.shapefilesLyr)

    def toggleAttributes(self):
        if self.dlg.attributesWidget.isVisible():
            self.dlg.attributesWidget.hide()
            self.dlg.setFixedSize(self.midSizedState)
        else:
            self.dlg.attributesWidget.show()
            self.dlg.setFixedSize(self.fullSizeState)
            

#   For Reference   ---------------------------------------------------------------------------------------------------------

# subLayers = kmllayer.dataProvider().subLayers()
# # print(subLayers)

# name = ''
# lineStringFound = False
# for subLayer in subLayers:
#     if 'LineString' in subLayer:
#         name = subLayer.split('!!::!!')[1]
#         lineStringFound = True
#         break

# if lineStringFound is False:
#     self.dlg.jobStatusLabel.setText('InValid KML Flight Line...')
#     return 0

# uri = '{}|layername={}'.format(kmlPath[0], name)
# processing.algorithmHelp('gdal:convertformat')

        # help(processing.run('gdal:convertformat'))

        # processing.run('gdal:convertformat', self.kmlLayer, 8, None, 'memory:lyrgml')

        # processing_result = processing.run('gdal:convertformat', {'INPUT': self.kmlLayer, 'OUTPUT':'memory'})['OUTPUT']
        # print(processing_result)

        # layer = QgsVectorLayer(processing_result, 'Lines', 'ogr')
        # QgsProject.instance().addMapLayer(layer)
        # self.iface.mapCanvas().refresh()

# wfstdataProvider = wfstlyr.dataProvider()

        # feats = [feat for feat in self.kmlLayer.getFeatures()]
        # print(feats)

        # # j = wfstlyr.addFeatures(feats)
        # j = wfstdataProvider.addFeatures(feats)
        # print(j)

        # wfstlyr.commitChanges()
        # self.iface.vectorLayerTools().stopEditing(wfstlyr)

        # attr = self.kmlLayer.dataProvider().fields().toList()
        # mem_layer_data.addAttributes(attr)
        # mem_layer.updateFields()

        # coordinatePairs = []
        # coordinatePairs.append(QgsPointXY(761941.051, 1712515.104))
        # coordinatePairs.append(QgsPointXY(809188.664, 1736641.544))
        # coordinatePairs.append(QgsPointXY(821251.884, 1671299.101))
        # coordinatePairs.append(QgsPointXY(761941.051, 1664262.222))

        # newPolygon = QgsGeometry.fromPolygonXY([coordinatePairs])

        # feature = QgsFeature()
        # feature.setGeometry(newPolygon)

        
        # dataProvider.addFeatures([feature])

        # QgsProject.instance().addMapLayer(vlayer)
        # self.iface.mapCanvas().refresh()